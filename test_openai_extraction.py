"""
Test script for updated OpenAI extraction functionality
Tests improved area/address detection and price parsing with spaces/commas
"""

import os
import sys
from typing import Dict

# Add current directory to path to import the main module
sys.path.append('.')

def test_openai_extraction():
    """Test OpenAI extraction with various ad text samples"""
    
    # Import the OpenAI extractor class
    try:
        from orbita_form_filler_v2 import OpenAIExtractor
        import config
    except ImportError as e:
        print(f"‚ùå Import error: {e}")
        print("Make sure config.py exists with OPENAI_API_KEY configured")
        return False

    # Test cases with different area/address and price formats
    test_cases = [
        {
            "name": "Rishon LeZion district with spaced price",
            "text": """
            –ü—Ä–æ–¥–∞–µ—Ç—Å—è 4-–∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –≤ —Ä–∞–π–æ–Ω–µ –ù–ê–•–õ–ê–î –ò–£–î–ê, –†–∏—à–æ–Ω-–ª–µ-–¶–∏–æ–Ω.
            3 —ç—Ç–∞–∂, –ø–æ–ª–Ω–æ—Å—Ç—å—é –º–µ–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è.
            –¶–µ–Ω–∞: 2 500 000 —à–µ–∫–µ–ª–µ–π.
            –û—Ç–ª–∏—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –±–ª–∏–∑–∫–æ –∫ —Ü–µ–Ω—Ç—Ä—É.
            """
        },
        {
            "name": "Street address with comma-separated price",
            "text": """
            –ö–≤–∞—Ä—Ç–∏—Ä–∞ 3.5 –∫–æ–º–Ω–∞—Ç—ã –Ω–∞ —É–ª–∏—Ü–µ –†–æ—Ç—à–∏–ª—å–¥ 15, –†–∏—à–æ–Ω-–ª–µ-–¶–∏–æ–Ω.
            5 —ç—Ç–∞–∂ –∏–∑ 8. –¶–µ–Ω–∞ 1,800,000 ‚Ç™.
            –ë–µ–∑ –º–µ–±–µ–ª–∏, —Ç—Ä–µ–±—É–µ—Ç —Ä–µ–º–æ–Ω—Ç–∞.
            """
        },
        {
            "name": "Hebrew street with dot-separated price",
            "text": """
            –ü—Ä–æ–¥–∞–º 5 –∫–æ–º–Ω–∞—Ç –≤ –†–ï–ú–ï–ó —Ä–∞–π–æ–Ω–µ.
            –ù–∞ —É–ª. –ì–µ—Ä—Ü–ª—å, 2 —ç—Ç–∞–∂.
            –°—Ç–æ–∏–º–æ—Å—Ç—å 3.200.000 —à–µ–∫–µ–ª–µ–π.
            –° –º–µ–±–µ–ª—å—é, –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞—Å–µ–ª–µ–Ω–∏—é.
            """
        },
        {
            "name": "Mixed format with multiple areas",
            "text": """
            –ö–≤–∞—Ä—Ç–∏—Ä–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ –†–∏—à–æ–Ω-–ª–µ-–¶–∏–æ–Ω–∞, —Ä—è–¥–æ–º —Å –ù–ï–í–ï –î–ï–ù–Ø.
            4.5 –∫–æ–º–Ω–∞—Ç—ã, –≤—ã—Å–æ–∫–∏–π —ç—Ç–∞–∂ (8 –∏–∑ 10).
            –û–±—Å—Ç–∞–≤–ª–µ–Ω–Ω–∞—è, —Ü–µ–Ω–∞ 2 800 000.
            –£–ª–∏—Ü–∞ –ñ–∞–±–æ—Ç–∏–Ω—Å–∫–∏–π, —Ç–∏—Ö–∏–π —Ä–∞–π–æ–Ω.
            """
        },
        {
            "name": "Price without separators",
            "text": """
            –ü—Ä–æ–¥–∞–µ—Ç—Å—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –≤ –ö–ò–†–¨–Ø–¢ –ì–ê–û–ù.
            3 –∫–æ–º–Ω–∞—Ç—ã, 4 —ç—Ç–∞–∂.
            –¶–µ–Ω–∞ 1750000 —à–µ–∫–µ–ª–µ–π.
            –ß–∞—Å—Ç–∏—á–Ω–æ —Å –º–µ–±–µ–ª—å—é.
            """
        },
        {
            "name": "Street without explicit district",
            "text": """
            –ö–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–∞ –ë—è–ª–∏–∫ 28, –†–∏—à–æ–Ω-–ª–µ-–¶–∏–æ–Ω.
            2.5 –∫–æ–º–Ω–∞—Ç—ã, –ø–µ—Ä–≤—ã–π —ç—Ç–∞–∂.
            –°—Ç–æ–∏–º–æ—Å—Ç—å 1 650 000 ‚Ç™.
            –¢—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
            """
        }
    ]
    
    print("üß™ Testing Updated OpenAI Extraction")
    print("=" * 60)
    
    try:
        extractor = OpenAIExtractor()
        print("‚úÖ OpenAI Extractor initialized successfully")
        print()
        
        for i, test_case in enumerate(test_cases, 1):
            print(f"üìã Test {i}: {test_case['name']}")
            print("-" * 40)
            print("Input text:")
            print(test_case['text'].strip())
            print()
            
            # Test OpenAI extraction
            try:
                result = extractor.extract_parameters(test_case['text'])
                print("ü§ñ OpenAI extraction result:")
                for key, value in result.items():
                    print(f"   {key}: {value}")
                
                if not result:
                    print("   No parameters extracted")
                    
            except Exception as e:
                print(f"‚ùå OpenAI extraction failed: {e}")
                
                # Test fallback extraction
                print("üîÑ Testing fallback extraction...")
                try:
                    fallback_result = extractor._fallback_extraction(test_case['text'])
                    print("üõ†Ô∏è Fallback extraction result:")
                    for key, value in fallback_result.items():
                        print(f"   {key}: {value}")
                except Exception as fe:
                    print(f"‚ùå Fallback extraction also failed: {fe}")
            
            print()
            print("=" * 60)
            print()
            
    except Exception as e:
        print(f"‚ùå Failed to initialize OpenAI Extractor: {e}")
        print("Make sure config.py has valid OPENAI_API_KEY")
        return False
    
    return True

def test_fallback_only():
    """Test only the fallback extraction method"""
    
    print("üõ†Ô∏è Testing Fallback Extraction Only")
    print("=" * 60)
    
    # Create a mock extractor to test fallback
    class MockExtractor:
        def _fallback_extraction(self, ad_text: str) -> Dict[str, str]:
            """Copy of the updated fallback method"""
            import re
            parameters = {}
            
            # Extract rooms
            room_patterns = [
                r'(\d+(?:\.\d+)?)\s*–∫–æ–º–Ω–∞—Ç',
                r'(\d+)\s*–∫',
                r'(\d+)\s*room'
            ]
            for pattern in room_patterns:
                match = re.search(pattern, ad_text, re.IGNORECASE)
                if match:
                    parameters['rooms'] = match.group(1)
                    break
            
            # Extract district - expanded list with streets
            districts = ['–ù–ê–•–õ–ê–î –ò–£–î–ê', '–†–ï–ú–ï–ó', '–ù–ï–í–ï –î–ï–ù–Ø', '–ö–ò–†–¨–Ø–¢ –ì–ê–û–ù', '–†–ê–ú–ê–¢ –≠–õ–ò–Ø–£', '–¶–ï–ù–¢–†', '–°–¢–ê–†–´–ô –ì–û–†–û–î']
            streets = ['–†–û–¢–®–ò–õ–¨–î', '–ì–ï–†–¶–õ–¨', '–ñ–ê–ë–û–¢–ò–ù–°–ö–ò–ô', '–ë–Ø–õ–ò–ö', '–ê–•–ê–î –•–ê–ê–ú', '–†–û–® –ü–ò–ù–ê', '–í–ê–ô–¶–ú–ê–ù', '–ëEN –ì–£–†–ò–û–ù', '–°–û–ö–û–õ–û–í']
            
            # Check districts first
            for district in districts:
                if district in ad_text.upper():
                    parameters['district'] = district
                    break
            
            # If no district found, check streets
            if 'district' not in parameters:
                for street in streets:
                    if street in ad_text.upper():
                        parameters['district'] = f"—É–ª. {street}"
                        break
            
            # Extract price - improved to handle spaces and commas
            price_patterns = [
                r'(\d{1,3}(?:[,\s]\d{3})*)\s*‚Ç™',  # With shekel symbol
                r'(\d{1,3}(?:[,\s]\d{3})+)',      # Long numbers with separators (4+ digits total)
                r'(\d{7,})',                      # Very long numbers (7+ digits)
                r'(\d{4,6})',                     # Medium numbers (4-6 digits)
            ]
            
            for pattern in price_patterns:
                price_match = re.search(pattern, ad_text)
                if price_match:
                    price = price_match.group(1).replace(',', '').replace(' ', '')
                    # Only consider it a price if it's reasonable (between 100k and 10M shekels)
                    try:
                        price_num = int(price)
                        if 100000 <= price_num <= 10000000:
                            parameters['price'] = price
                            break
                    except ValueError:
                        continue
            
            return parameters
    
    extractor = MockExtractor()
    
    test_texts = [
        "–ö–≤–∞—Ä—Ç–∏—Ä–∞ 4 –∫–æ–º–Ω–∞—Ç—ã –≤ –ù–ê–•–õ–ê–î –ò–£–î–ê, —Ü–µ–Ω–∞ 2 500 000 ‚Ç™",
        "–ù–∞ —É–ª–∏—Ü–µ –†–æ—Ç—à–∏–ª—å–¥, 3.5 –∫–æ–º–Ω–∞—Ç, —Å—Ç–æ–∏–º–æ—Å—Ç—å 1,800,000",
        "–†–ï–ú–ï–ó —Ä–∞–π–æ–Ω, 5 –∫–æ–º–Ω–∞—Ç, —Ü–µ–Ω–∞ 3.200.000 —à–µ–∫–µ–ª–µ–π",
        "–¶–µ–Ω—Ç—Ä –≥–æ—Ä–æ–¥–∞, —É–ª. –ì–µ—Ä—Ü–ª—å, 2 800 000",
        "–ë—è–ª–∏–∫ 15, 1650000 —à–µ–∫–µ–ª–µ–π"
    ]
    
    for i, text in enumerate(test_texts, 1):
        print(f"üìã Fallback Test {i}:")
        print(f"Text: {text}")
        result = extractor._fallback_extraction(text)
        print("Result:", result)
        print("-" * 40)

def main():
    """Main test function"""
    print("üöÄ Starting OpenAI Extraction Tests")
    print("Testing improved area/address detection and price parsing")
    print()
    
    # Check if config exists
    try:
        import config
        if not hasattr(config, 'OPENAI_API_KEY') or config.OPENAI_API_KEY == "your_openai_api_key_here":
            print("‚ö†Ô∏è OpenAI API key not configured, testing fallback only")
            test_fallback_only()
        else:
            print("‚úÖ OpenAI API key found, testing full functionality")
            success = test_openai_extraction()
            if not success:
                print("\nüîÑ Falling back to testing extraction logic only...")
                test_fallback_only()
    except ImportError:
        print("‚ùå config.py not found, testing fallback only")
        test_fallback_only()
    
    print("\nüéØ Test completed!")
    print("Check the results above to verify:")
    print("‚úì Area/address detection for Rishon LeZion")
    print("‚úì Price extraction with spaces and commas")

if __name__ == "__main__":
    main() 